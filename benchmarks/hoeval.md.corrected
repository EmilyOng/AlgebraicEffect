
Run these using `ocaml-mdx test benchmarks/hoeval.md -v`.
It should take around 5 minutes.

Some sanity checks first:

```sh
$ dune exec parsing/hip.exe src/examples/calls.ml | grep Time | choose 2 | paste -s -d+ - | bc
301
```

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/calls.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/calls.ml
  Time (mean ± σ):     522.8 ms ±   7.7 ms    [User: 254.1 ms, System: 247.2 ms]
  Range (min … max):   511.2 ms … 539.3 ms    10 runs

```

```sh
$ DEBUG=0 time dune exec parsing/hip.exe src/examples/calls.ml > /dev/null
        0.53 real         0.25 user         0.25 sys
```

Project size:

```sh
$ loc parsing/{hiptypes.ml,common.ml,hiplib.ml,tests.ml,ProversEx.ml,Rewriting.ml,Pretty.ml,entail.ml,res.ml,forward_rules.ml,infer_types.ml,normalize.ml,hip.ml,hipjs.ml}
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
 OCaml                   14         4741          599          498         3644
--------------------------------------------------------------------------------
 Total                   14         4741          599          498         3644
--------------------------------------------------------------------------------
```

Stats:

(The following is generated using generate.sh)

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/calls.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/calls.ml
  Time (mean ± σ):     528.5 ms ±  10.7 ms    [User: 255.7 ms, System: 251.6 ms]
  Range (min … max):   512.6 ms … 544.7 ms    10 runs

$ loc src/examples/calls.ml
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
 OCaml                    1           52            9            9           34
--------------------------------------------------------------------------------
 Total                    1           52            9            9           34
--------------------------------------------------------------------------------
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/calls.ml
(*@ Norm(emp, 2) @*)
(*@ Norm(emp, 2) @*)
(*@ Norm(emp, 1) @*)
$ rg --multiline --multiline-dotall -c '(\*@.*?@\*)' src/examples/calls.ml
3
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/calls.ml | wc -l
       3
```

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/iter.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/iter.ml
  Time (mean ± σ):     436.3 ms ±   5.7 ms    [User: 235.4 ms, System: 180.1 ms]
  Range (min … max):   428.8 ms … 445.5 ms    10 runs

$ loc src/examples/iter.ml
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
 OCaml                    1           33            5            5           23
--------------------------------------------------------------------------------
 Total                    1           33            5            5           23
--------------------------------------------------------------------------------
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/iter.ml
(*@ ex r; integers(i, n, r) @*)
(*@ ex i; req x->i; ex r; integers(i, n, r) @*)
$ rg --multiline --multiline-dotall -c '(\*@.*?@\*)' src/examples/iter.ml
2
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/iter.ml | wc -l
       2
```

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/closure.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/closure.ml
  Time (mean ± σ):      1.030 s ±  0.017 s    [User: 453.4 ms, System: 552.8 ms]
  Range (min … max):    1.010 s …  1.069 s    10 runs

$ loc src/examples/closure.ml
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
 OCaml                    1           32            3            4           25
--------------------------------------------------------------------------------
 Total                    1           32            3            4           25
--------------------------------------------------------------------------------
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/closure.ml
(*@ ex i; Norm(i->[8;7;42], [8;7;42]) @*)
(*@ ex i j; Norm(i->1 * j->2, 3) @*)
(*@ Norm(emp, 4) @*)
$ rg --multiline --multiline-dotall -c '(\*@.*?@\*)' src/examples/closure.ml
3
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/closure.ml | wc -l
       3
```

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/map.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/map.ml
  Time (mean ± σ):     914.7 ms ±  20.2 ms    [User: 563.6 ms, System: 322.3 ms]
  Range (min … max):   894.0 ms … 961.0 ms    10 runs

$ loc src/examples/map.ml
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
 OCaml                    1          105           29           32           44
--------------------------------------------------------------------------------
 Total                    1          105           29           32           44
--------------------------------------------------------------------------------
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/map.ml
(*@ Norm(emp, ys) @*)
(*@ Norm(emp, ys) @*)
(*@ ex r; succ_list(ys, r); Norm(emp, r) @*)
(*@ ex i; req x->i; ex r; length(xs, r); ex r1; Norm(r1=xs/\x->i+r, r1) @*)
(*@ Norm(emp, 0) @*)=
(*@ Norm(emp, 2) @*)=
(*@ ex i; req x->i; ex r; length(xs, r); ex r1; Norm(x->i+r, r1) @*)
(*@ ex i; req x->i; ex r; incr_list(i+1, xs, r); Norm(emp, r) @*)
$ rg --multiline --multiline-dotall -c '(\*@.*?@\*)' src/examples/map.ml
8
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/map.ml | wc -l
       8
```

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/fold.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/fold.ml
  Time (mean ± σ):     899.8 ms ±  11.9 ms    [User: 627.3 ms, System: 248.6 ms]
  Range (min … max):   885.1 ms … 926.7 ms    10 runs

$ loc src/examples/fold.ml
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
 OCaml                    1           37            7            4           26
--------------------------------------------------------------------------------
 Total                    1           37            7            4           26
--------------------------------------------------------------------------------
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/fold.ml
(*@ ex r; length(xs, r); Norm(emp, r+init) @*)
(*@ ex i; req x->i; ex r; length(xs, r); Norm(x->i+r, r+init) @*)
(*@ ex r; sum(xs, r); Norm(emp, r+init) @*)
(*@ ex i; req x->i; ex r; sum(xs, r); Norm(x->i+r, r+init) @*)
$ rg --multiline --multiline-dotall -c '(\*@.*?@\*)' src/examples/fold.ml
4
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/fold.ml | wc -l
       4
```

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/compose.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/compose.ml
  Time (mean ± σ):     350.3 ms ±   5.8 ms    [User: 184.2 ms, System: 144.6 ms]
  Range (min … max):   341.5 ms … 358.9 ms    10 runs

$ loc src/examples/compose.ml
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
 OCaml                    1           18            5            2           11
--------------------------------------------------------------------------------
 Total                    1           18            5            2           11
--------------------------------------------------------------------------------
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/compose.ml
(*@ ex w; Norm(w->3, 3) @*)
(*@ ex w; Norm(w->4, 4) @*)
$ rg --multiline --multiline-dotall -c '(\*@.*?@\*)' src/examples/compose.ml
2
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/compose.ml | wc -l
       2
```

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/applyN.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/applyN.ml
  Time (mean ± σ):     405.4 ms ±   4.3 ms    [User: 209.3 ms, System: 174.2 ms]
  Range (min … max):   399.2 ms … 412.1 ms    10 runs

$ loc src/examples/applyN.ml
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
 OCaml                    1           27            6            6           15
--------------------------------------------------------------------------------
 Total                    1           27            6            6           15
--------------------------------------------------------------------------------
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/applyN.ml
(*@ Norm(n=0/\emp, x) \/
  req n>0/\emp; ex r2; f(x, r2); ex r1; applyN_unfolded(f, r2, n-1, r1); Norm(emp, r1) @*)
(*@ Norm(emp, 9) @*)
(*@ Norm(emp, x+n) @*)
(*@ ex r4; Norm(r4=x+n-1/\emp, r4) @*)
(*@ ex r4; Norm(r4=x+n+1/\emp, r4) @*)
$ rg --multiline --multiline-dotall -c '(\*@.*?@\*)' src/examples/applyN.ml
5
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/applyN.ml | wc -l
       6
```

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/all.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/all.ml
  Time (mean ± σ):     20.276 s ±  0.239 s    [User: 20.014 s, System: 0.165 s]
  Range (min … max):   19.970 s … 20.814 s    10 runs

$ loc src/examples/all.ml
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
 OCaml                    1           38           10            8           20
--------------------------------------------------------------------------------
 Total                    1           38           10            8           20
--------------------------------------------------------------------------------
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/all.ml
(*@ ex xs; all(is_one, xs, true); Norm(emp, xs) @*)
(*@ ex xs; all(is_pos, xs, true); Norm(emp, xs) @*)
(*@ req n>1/\emp; ex xs; any(is_one, xs, true); Norm(emp, xs) @*)
$ rg --multiline --multiline-dotall -c '(\*@.*?@\*)' src/examples/all.ml
3
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/all.ml | wc -l
       3
```
