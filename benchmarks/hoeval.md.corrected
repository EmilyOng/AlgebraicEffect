
Run these using `ocaml-mdx test benchmarks/hoeval.md -v`.
It should take around 5 minutes.

Some sanity checks first:

```sh
$ dune exec parsing/hip.exe src/examples/calls.ml | grep Time | choose 2 | paste -s -d+ - | bc
Fatal error: exception Sys_error("/Users/darius/ocaml/AlgebraicEffect/src/examples/calls.ml: No such file or directory")
Raised by primitive operation at Stdlib.open_in_gen in file "stdlib.ml", line 403, characters 28-54
Called from Stdlib.open_in in file "stdlib.ml" (inlined), line 408, characters 2-45
Called from Hiplib.run_file in file "parsing/hiplib.ml", line 1299, characters 11-28
Called from Hiplib.main in file "parsing/hiplib.ml", line 1341, characters 2-20
Called from Dune__exe__Hip in file "parsing/hip.ml", line 27, characters 4-18
```

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/calls.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/calls.ml
Error: Command terminated with non-zero exit code. Use the '-i'/'--ignore-failure' option if you want to ignore this. Alternatively, use the '--show-output' option to debug what went wrong.
[1]
```

```sh
$ DEBUG=0 time dune exec parsing/hip.exe src/examples/calls.ml > /dev/null
Fatal error: exception Sys_error("/Users/darius/ocaml/AlgebraicEffect/src/examples/calls.ml: No such file or directory")
Raised by primitive operation at Stdlib.open_in_gen in file "stdlib.ml", line 403, characters 28-54
Called from Stdlib.open_in in file "stdlib.ml" (inlined), line 408, characters 2-45
Called from Hiplib.run_file in file "parsing/hiplib.ml", line 1299, characters 11-28
Called from Hiplib.main in file "parsing/hiplib.ml", line 1341, characters 2-20
Called from Dune__exe__Hip in file "parsing/hip.ml", line 27, characters 4-18
        0.21 real         0.12 user         0.06 sys
[2]
```

Project size:

```sh
$ loc parsing/{hipcore.ml,debug.ml,subst.ml,hiptypes.ml,common.ml,hiplib.ml,tests.ml,ProversEx.ml,Rewriting.ml,Pretty.ml,entail.ml,res.ml,forward_rules.ml,infer_types.ml,normalize.ml,hip.ml,hipjs.ml} provers/{native/provers.ml,js/provers.ml}
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
 OCaml                   18         6238          730          729         4779
--------------------------------------------------------------------------------
 Total                   18         6238          730          729         4779
--------------------------------------------------------------------------------
```

Stats:

(The following is generated using generate.sh)

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/calls.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/calls.ml
Error: Command terminated with non-zero exit code. Use the '-i'/'--ignore-failure' option if you want to ignore this. Alternatively, use the '--show-output' option to debug what went wrong.
[1]
$ loc src/examples/calls.ml
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 Total                    0            0            0            0            0
--------------------------------------------------------------------------------
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/calls.ml
src/examples/calls.ml: No such file or directory (os error 2)
[2]
$ rg --multiline --multiline-dotall -c '(\*@.*?@\*)' src/examples/calls.ml
src/examples/calls.ml: No such file or directory (os error 2)
[2]
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/calls.ml | wc -l
src/examples/calls.ml: No such file or directory (os error 2)
       0
```

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/iter.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/iter.ml
  Time (mean ± σ):     366.1 ms ±  35.4 ms    [User: 214.0 ms, System: 123.4 ms]
  Range (min … max):   324.6 ms … 452.8 ms    10 runs

$ loc src/examples/iter.ml
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
 OCaml                    1           33            5            5           23
--------------------------------------------------------------------------------
 Total                    1           33            5            5           23
--------------------------------------------------------------------------------
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/iter.ml
(*@ ex r; integers(i, n, r) @*)
(*@ ex i; req x->i; ex r; integers(i, n, r) @*)
$ rg --multiline --multiline-dotall -c '(\*@.*?@\*)' src/examples/iter.ml
2
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/iter.ml | wc -l
       2
```

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/closure.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/closure.ml
  Time (mean ± σ):     299.8 ms ±  13.9 ms    [User: 180.5 ms, System: 96.4 ms]
  Range (min … max):   285.8 ms … 333.5 ms    10 runs

$ loc src/examples/closure.ml
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
 OCaml                    1           32            3            4           25
--------------------------------------------------------------------------------
 Total                    1           32            3            4           25
--------------------------------------------------------------------------------
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/closure.ml
(*@ ex i; Norm(i->[8;7;42], [8;7;42]) @*)
(*@ ex i j; Norm(i->1 * j->2, 3) @*)
(*@ Norm(emp, 4) @*)
$ rg --multiline --multiline-dotall -c '(\*@.*?@\*)' src/examples/closure.ml
3
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/closure.ml | wc -l
       3
```

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/map.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/map.ml
  Time (mean ± σ):     431.1 ms ±   3.2 ms    [User: 257.6 ms, System: 151.6 ms]
  Range (min … max):   426.4 ms … 435.8 ms    10 runs

$ loc src/examples/map.ml
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
 OCaml                    1          105           29           33           43
--------------------------------------------------------------------------------
 Total                    1          105           29           33           43
--------------------------------------------------------------------------------
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/map.ml
(*@ Norm(emp, ys) @*)
(*@ Norm(emp, ys) @*)
(*@ ex r; succ_list(ys, r); Norm(emp, r) @*)
(*@ ex i; req x->i; ex r; length(xs, r); ex r1; Norm(r1=xs/\x->i+r, r1) @*)
(*@ Norm(emp, 0) @*)=
(*@ Norm(emp, 2) @*)=
(*@ ex i; req x->i; ex r; length(xs, r); ex r1; Norm(x->i+r, r1) @*)
(*@ ex i; req x->i; ex r; incr_list(i+1, xs, r); Norm(emp, r) @*)
$ rg --multiline --multiline-dotall -c '(\*@.*?@\*)' src/examples/map.ml
8
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/map.ml | wc -l
       8
```

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/fold.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/fold.ml
  Time (mean ± σ):     603.3 ms ±  25.6 ms    [User: 428.0 ms, System: 151.6 ms]
  Range (min … max):   566.9 ms … 637.8 ms    10 runs

$ loc src/examples/fold.ml
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
 OCaml                    1           37            7            4           26
--------------------------------------------------------------------------------
 Total                    1           37            7            4           26
--------------------------------------------------------------------------------
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/fold.ml
(*@ ex r; length(xs, r); Norm(emp, r+init) @*)
(*@ ex i; req x->i; ex r; length(xs, r); Norm(x->i+r, r+init) @*)
(*@ ex r; sum(xs, r); Norm(emp, r+init) @*)
(*@ ex i; req x->i; ex r; sum(xs, r); Norm(x->i+r, r+init) @*)
$ rg --multiline --multiline-dotall -c '(\*@.*?@\*)' src/examples/fold.ml
4
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/fold.ml | wc -l
       4
```

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/compose.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/compose.ml
  Time (mean ± σ):     270.9 ms ±   8.7 ms    [User: 154.7 ms, System: 93.3 ms]
  Range (min … max):   260.0 ms … 287.7 ms    11 runs

$ loc src/examples/compose.ml
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
 OCaml                    1           18            5            2           11
--------------------------------------------------------------------------------
 Total                    1           18            5            2           11
--------------------------------------------------------------------------------
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/compose.ml
(*@ ex w; Norm(w->3, 3) @*)
(*@ ex w; Norm(w->4, 4) @*)
$ rg --multiline --multiline-dotall -c '(\*@.*?@\*)' src/examples/compose.ml
2
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/compose.ml | wc -l
       2
```

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/applyN.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/applyN.ml
  Time (mean ± σ):     327.2 ms ±   6.3 ms    [User: 187.0 ms, System: 118.2 ms]
  Range (min … max):   319.9 ms … 339.1 ms    10 runs

$ loc src/examples/applyN.ml
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
 OCaml                    1           27            6            6           15
--------------------------------------------------------------------------------
 Total                    1           27            6            6           15
--------------------------------------------------------------------------------
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/applyN.ml
(*@ Norm(n=0/\emp, x) \/
  req n>0/\emp; ex r2; f(x, r2); ex r1; applyN_unfolded(f, r2, n-1, r1); Norm(emp, r1) @*)
(*@ Norm(emp, 9) @*)
(*@ Norm(emp, x+n) @*)
(*@ ex r4; Norm(r4=x+n-1/\emp, r4) @*)
(*@ ex r4; Norm(r4=x+n+1/\emp, r4) @*)
$ rg --multiline --multiline-dotall -c '(\*@.*?@\*)' src/examples/applyN.ml
5
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/applyN.ml | wc -l
       6
```

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/all.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/all.ml
  Time (mean ± σ):     19.551 s ±  0.441 s    [User: 19.372 s, System: 0.124 s]
  Range (min … max):   18.835 s … 20.107 s    10 runs

$ loc src/examples/all.ml
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
 OCaml                    1           38           10            8           20
--------------------------------------------------------------------------------
 Total                    1           38           10            8           20
--------------------------------------------------------------------------------
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/all.ml
(*@ ex xs; all(is_one, xs, true); Norm(emp, xs) @*)
(*@ ex xs; all(is_pos, xs, true); Norm(emp, xs) @*)
(*@ req n>1/\emp; ex xs; any(is_one, xs, true); Norm(emp, xs) @*)
$ rg --multiline --multiline-dotall -c '(\*@.*?@\*)' src/examples/all.ml
3
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/all.ml | wc -l
       3
```
