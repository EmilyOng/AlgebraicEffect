
Run these using `ocaml-mdx test benchmarks/hoeval.md -v`.
It should take around 5 minutes.

Some sanity checks first:

```sh
$ dune exec parsing/hip.exe src/examples/calls.ml | grep Time | choose 2 | paste -s -d+ - | bc
260
```

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/calls.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/calls.ml
  Time (mean ± σ):     527.8 ms ±   5.9 ms    [User: 254.9 ms, System: 251.5 ms]
  Range (min … max):   520.3 ms … 538.0 ms    10 runs

```

```sh
$ DEBUG=0 time dune exec parsing/hip.exe src/examples/calls.ml > /dev/null
        0.52 real         0.25 user         0.24 sys
```

Stats:

(The following is generated using generate.sh)


```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/calls.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/calls.ml
  Time (mean ± σ):     523.9 ms ±   5.1 ms    [User: 254.6 ms, System: 246.2 ms]
  Range (min … max):   513.8 ms … 532.2 ms    10 runs

$ loc src/examples/calls.ml
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
 OCaml                    1           52            9            9           34
--------------------------------------------------------------------------------
 Total                    1           52            9            9           34
--------------------------------------------------------------------------------
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/calls.ml
(*@ Norm(emp, 2) @*)
(*@ Norm(emp, 2) @*)
(*@ Norm(emp, 1) @*)
$ rg --multiline --multiline-dotall -c '(\*@.*?@\*)' src/examples/calls.ml
3
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/calls.ml | wc -l
       3
```

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/iter.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/iter.ml
  Time (mean ± σ):     438.7 ms ±   4.7 ms    [User: 235.1 ms, System: 181.5 ms]
  Range (min … max):   432.1 ms … 444.9 ms    10 runs

$ loc src/examples/iter.ml
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
 OCaml                    1           33            5            5           23
--------------------------------------------------------------------------------
 Total                    1           33            5            5           23
--------------------------------------------------------------------------------
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/iter.ml
(*@ ex r; integers(i, n, r) @*)
(*@ ex i; req x->i; ex r; integers(i, n, r) @*)
$ rg --multiline --multiline-dotall -c '(\*@.*?@\*)' src/examples/iter.ml
2
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/iter.ml | wc -l
       2
```

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/closure.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/closure.ml
  Time (mean ± σ):      1.026 s ±  0.011 s    [User: 452.1 ms, System: 550.9 ms]
  Range (min … max):    1.014 s …  1.048 s    10 runs

$ loc src/examples/closure.ml
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
 OCaml                    1           32            3            4           25
--------------------------------------------------------------------------------
 Total                    1           32            3            4           25
--------------------------------------------------------------------------------
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/closure.ml
(*@ ex i; Norm(i->[8;7;42], [8;7;42]) @*)
(*@ ex i j; Norm(i->1 * j->2, 3) @*)
(*@ Norm(emp, 4) @*)
$ rg --multiline --multiline-dotall -c '(\*@.*?@\*)' src/examples/closure.ml
3
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/closure.ml | wc -l
       3
```

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/map.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/map.ml
  Time (mean ± σ):     910.7 ms ±   5.7 ms    [User: 558.6 ms, System: 328.3 ms]
  Range (min … max):   903.0 ms … 918.5 ms    10 runs

$ loc src/examples/map.ml
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
 OCaml                    1          105           29           32           44
--------------------------------------------------------------------------------
 Total                    1          105           29           32           44
--------------------------------------------------------------------------------
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/map.ml
(*@ Norm(emp, ys) @*)
(*@ Norm(emp, ys) @*)
(*@ ex r; succ_list(ys, r); Norm(emp, r) @*)
(*@ ex i; req x->i; ex r; length(xs, r); ex r1; Norm(r1=xs/\x->i+r, r1) @*)
(*@ Norm(emp, 0) @*)=
(*@ Norm(emp, 2) @*)=
(*@ ex i; req x->i; ex r; length(xs, r); ex r1; Norm(x->i+r, r1) @*)
(*@ ex i; req x->i; ex r; incr_list(i+1, xs, r); Norm(emp, r) @*)
$ rg --multiline --multiline-dotall -c '(\*@.*?@\*)' src/examples/map.ml
8
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/map.ml | wc -l
       8
```

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/fold.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/fold.ml
  Time (mean ± σ):     898.8 ms ±   7.0 ms    [User: 621.6 ms, System: 254.3 ms]
  Range (min … max):   889.5 ms … 914.7 ms    10 runs

$ loc src/examples/fold.ml
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
 OCaml                    1           37            7            4           26
--------------------------------------------------------------------------------
 Total                    1           37            7            4           26
--------------------------------------------------------------------------------
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/fold.ml
(*@ ex r; length(xs, r); Norm(emp, r+init) @*)
(*@ ex i; req x->i; ex r; length(xs, r); Norm(x->i+r, r+init) @*)
(*@ ex r; sum(xs, r); Norm(emp, r+init) @*)
(*@ ex i; req x->i; ex r; sum(xs, r); Norm(x->i+r, r+init) @*)
$ rg --multiline --multiline-dotall -c '(\*@.*?@\*)' src/examples/fold.ml
4
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/fold.ml | wc -l
       4
```

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/compose.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/compose.ml
  Time (mean ± σ):     556.4 ms ±   9.0 ms    [User: 270.3 ms, System: 264.3 ms]
  Range (min … max):   547.8 ms … 575.2 ms    10 runs

$ loc src/examples/compose.ml
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
 OCaml                    1           33            5           15           13
--------------------------------------------------------------------------------
 Total                    1           33            5           15           13
--------------------------------------------------------------------------------
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/compose.ml
(*@
  ex r_g; g(x, r_g);
  ex r_f; f(r_g, r_f);
  Norm (emp, r_f)
@*)
(*@ ex z;
    req x->z;
    Norm(x->z+1, x) @*)
(*@ ex u;
    req x->u;
    ex ret;
    Norm(ret=u+u/\x->u+u, x) @*)
(*@ ex w; Norm(w->3, 3) @*)
(*@ ex w; Norm(w->4, 4) @*)
$ rg --multiline --multiline-dotall -c '(\*@.*?@\*)' src/examples/compose.ml
5
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/compose.ml | wc -l
      14
```

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/applyN.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/applyN.ml
  Time (mean ± σ):     411.4 ms ±  10.2 ms    [User: 209.2 ms, System: 177.8 ms]
  Range (min … max):   400.8 ms … 437.7 ms    10 runs

$ loc src/examples/applyN.ml
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
 OCaml                    1           29            6            8           15
--------------------------------------------------------------------------------
 Total                    1           29            6            8           15
--------------------------------------------------------------------------------
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/applyN.ml
(*@
  Norm(n=0/\emp, x) \/
  req n>0/\emp; ex r2; f(x, r2); ex r1; applyN_unfolded(f, r2, n-1, r1); Norm(emp, r1)
@*)
(*@ Norm(emp, 9) @*)
(*@ Norm(emp, x+n) @*)
(*@ ex r4; Norm(r4=x+n-1/\emp, r4) @*)
(*@ ex r4; Norm(r4=x+n+1/\emp, r4) @*)
$ rg --multiline --multiline-dotall -c '(\*@.*?@\*)' src/examples/applyN.ml
5
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/applyN.ml | wc -l
       8
```

```sh
$ DEBUG=0 hyperfine --warmup 2 'dune exec parsing/hip.exe src/examples/all.ml'
Benchmark #1: dune exec parsing/hip.exe src/examples/all.ml
  Time (mean ± σ):     20.163 s ±  0.194 s    [User: 19.896 s, System: 0.164 s]
  Range (min … max):   19.929 s … 20.486 s    10 runs

$ loc src/examples/all.ml
--------------------------------------------------------------------------------
 Language             Files        Lines        Blank      Comment         Code
--------------------------------------------------------------------------------
 OCaml                    1           38           10            8           20
--------------------------------------------------------------------------------
 Total                    1           38           10            8           20
--------------------------------------------------------------------------------
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/all.ml
(*@ ex xs; all(is_one, xs, true); Norm(emp, xs) @*)
(*@ ex xs; all(is_pos, xs, true); Norm(emp, xs) @*)
(*@ req n>1/\emp; ex xs; any(is_one, xs, true); Norm(emp, xs) @*)
$ rg --multiline --multiline-dotall -c '(\*@.*?@\*)' src/examples/all.ml
3
$ rg --multiline --multiline-dotall '(\*@.*?@\*)' src/examples/all.ml | wc -l
       3
```
